#!/usr/bin/env node

/*
 * Copyright (c) 2018 One Hill Technologies, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const program = require ('commander');
const path    = require ('path');
const ora     = require ('ora');
const handlebars = require ('handlebars');

const { ensureDir } = require ('fs-extra');
const { kebabCase } = require ('lodash');
const { execFile } = require ('child_process');
const { fromCallback } = require ('bluebird');
const { Generator } = require ('@onehilltech/blueprint-cli-exts');

const TemplatePath = require ('../lib/template-path');
const ProgramContext = require ('../lib/program-context');

const NewGenerator = Generator.extend ({
  helpers: {
    normalizedProjectName () {
      return kebabCase (this.arguments[0]);
    }
  }
});

program
  .arguments ('<name>')
  .option ('-o, --output-path [path]', 'output path [./]', './')
  .option ('--version [version]', 'version number [0.0.1]', '0.0.1')
  .option ('--license [license]', 'distribution license [Apache-2.0]', 'Apache-2.0')
  .action (generate);

program.parse (process.argv);

function generate (name) {
  let srcPath = path.resolve (__dirname, '../templates/blueprint-new');
  let dstPath = path.resolve (program.outputPath, kebabCase (name));

  let generator = new NewGenerator ();
  generator.registerHelpers (handlebars);

  return ensureDir (dstPath).then (() => {
    console.log ('blueprint: generating the application; please be patient...');

    // Define the view used to render the templates, then render the templates with
    // this view of the system.
    let context = new ProgramContext (program);
    let templates = new TemplatePath ({handlebars, srcPath});

    return templates.render (dstPath, context);
  }).then (() => {
    const commands = [
      [ 'install'],
      [ 'bin' ]
    ];

    let promises = Promise.all (commands.map (command => fromCallback (callback => execFile ('npm', command, {cwd: dstPath}, callback))));
    ora.promise (promises, 'installing node modules...');

    return promises;
  }).then (() => {
    console.log ('Happy Coding!')
  }).catch (err => console.error (err.message))
}
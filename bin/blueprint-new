#!/usr/bin/env node

const program = require ('commander');
const path    = require ('path');

const { ensureDir } = require ('fs-extra');
const { kebabCase } = require ('lodash');
const { execFile } = require ('child_process');
const { fromCallback } = require ('bluebird');
const ora = require ('ora');

const TemplatePath = require ('../lib/template-path');
const Generator = require ('../lib/generator');

program
  .arguments ('<name>')
  .option ('-o, --output-path [path]', 'output path [./]', './')
  .option ('--version [version]', 'version number [0.0.1]', '0.0.1')
  .option ('--license [license]', 'distribution license [Apache-2.0]', 'Apache-2.0')
  .action (generate);

program.parse (process.argv);

function generate (name) {
  let srcPath = path.resolve (__dirname, '../templates/blueprint-new');
  let dstPath = path.resolve (program.outputPath, kebabCase (name));

  let generator = new Generator ();
  generator.registerHelpers ();

  return ensureDir (dstPath).then (() => {
    console.log ('blueprint: generating the application; please be patient...');

    // Define the view used to render the templates, then render the templates with
    // this view of the system.
    const context = {
      project: {
        name: name,
        version: program.version,
        license: program.license
      }
    };

    let templates = new TemplatePath ({basePath: srcPath, srcPath});
    return templates.render (dstPath, context);
  }).then (() => {
    const commands = [
      [ 'install'],
      [ 'bin' ]
    ];

    let promises = Promise.all (commands.map (command => fromCallback (callback => execFile ('npm', command, {cwd: dstPath}, callback))));
    ora.promise (promises, 'installing node modules...');

    return promises;
  }).then (() => {
    console.log ('Happy Coding!')
  }).catch (err => console.error (err.message))
}